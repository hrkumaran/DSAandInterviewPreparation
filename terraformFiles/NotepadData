1) yum install -y yum-utils

2) yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo

3) yum -y install terraform

4)terraform version
Terraform v1.4.4
on linux_amd64


####################################

[root@minion ~]# mkdir aws_instance    ^C
[root@minion ~]# cd aws_instance
[root@minion aws_instance]# vi main.tf
terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "4.61.0"
    }
  }
}

provider "aws" {
  region     = "ap-south-1"
  access_key = "AKIATPWSSPPSD7KHNH"
  secret_key = "QaJkQppXY4Vyon4dqbwtkO4Q8qfnalutNSapjc"
}

resource "aws_instance" "web" {
  ami           = "ami-038face4e75b6a399"
  instance_type = "t2.micro"

  tags = {
    Name = "Sagar-newweb"
  }
}


[root@minion aws_instance]# terraform init   ^C
[root@minion aws_instance]# ls -lta
total 20
drwxr-xr-x.  3 root root   91 Apr  3 15:32 .
-rw-r--r--.  1 root root  404 Apr  3 15:32 main.tf
-rw-r--r--.  1 root root 4443 Apr  3 15:27 terraform.tfstate
-rw-r--r--.  1 root root 1406 Apr  3 15:13 .terraform.lock.hcl
drwxr-xr-x.  3 root root   23 Apr  3 15:13 .terraform
dr-xr-x---. 21 root root 4096 Apr  3 15:05 ..
[root@minion aws_instance]# terraform validate     ^C
[root@minion aws_instance]# terraform plan        ^C
[root@minion aws_instance]# terraform apply    ^C
[root@minion aws_instance]# rm -fr terraform.tfstate   ^C
[root@minion aws_instance]# terraform apply   ^C


####################################

[root@minion]#  cd
[root@minion]#  mkdir aws_instance_vars
[root@minion]#  cd aws_instance_vars

[root@minion aws_instance_vars]# cat main.tf
resource "aws_instance" "web" {
  ami           = var.ami
  instance_type = var.instance_type
  tags = var.tags
}
[root@minion aws_instance_vars]# cat provider.tf
terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "4.61.0"
    }
  }
}

provider "aws" {
  region     = var.region
  access_key = var.access_key
  secret_key = var.secret_key
}
[root@minion aws_instance_vars]# cat variable.tf
variable "region" {
  description = "Default Datacenter for AWS"
  type = string
  default = "ap-south-1"
}

variable "access_key" {
  description = "Default Access Key for AWS"
  default = "AKIATPWBFSSPPSD7KHNH"
}

variable "secret_key" {
  default  = "QaJkQppXY4Vyon8R4dqbwtkO4Q8qfnalutNSapjc"
}

variable "ami" {
  default = "ami-038face4e75b6a399"
}

variable "instance_type" {
  default = "t2.micro"
}

variable "tags" {
  type = map
  default = { Name = "Sagar-web" }
}

variable "mynumber" {
  type = number
  default = 100
}

variable "mybool" {
  type = bool
  default = true
}

variable "mylist" {
  default = ["100", "200", "300"]
}
[root@minion aws_instance_vars]# terraform init   ^C
[root@minion aws_instance_vars]# terraform validate    ^C
[root@minion aws_instance_vars]# terraform plan    ^C
[root@minion aws_instance_vars]# terraform apply    ^C


############################


[root@minion aws_instance_vars]# cat output.tf
output "PrivateIP" {
  value = aws_instance.web.private_ip
}

output "PublicIP" {
  value = aws_instance.web.public_ip
}

output "PublicDNS" {
  value = aws_instance.web.public_dns
}


###########################

[root@minion aws_instance_vars]# cd
[root@minion ~]# pwd
/root
[root@minion ~]# ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/root/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:6Oqcpc3vewxmvnO/tM07WtQrkemHgnzppdpmolNUm0Y root@minion
The key's randomart image is:
 ---[RSA 2048]----
|                 |
|           E     |
|          o o    |
|       . .    o. |
|      . S .   . .|
|     .  =.. o.o .|
|      o .=  .=.o |
|   . B .o.B  =   |
|   .* o BB===o o |
 ----[SHA256]-----


#########################################

[root@minion ~]# mkdir aws_instance_ssh/            ^C
[root@minion ~]# cd aws_instance_ssh/
[root@minion aws_instance_ssh]# cp -fr ../aws_instance_vars/main.tf .     ^C
[root@minion aws_instance_ssh]# cp -fr ../aws_instance_vars/provider.tf .    ^C
[root@minion aws_instance_ssh]# cp -fr ../aws_instance_vars/variable.tf .      ^C
[root@minion aws_instance_ssh]# cp -fr ../aws_instance_vars/output.tf .     ^C
[root@minion aws_instance_ssh]# cat main.tf
resource "aws_key_pair" "sagar-keypair" {
  key_name   = "sagar-keypair"
  public_key = file("/root/.ssh/id_rsa.pub")
}

resource "aws_instance" "web" {
  ami           = var.ami
  instance_type = var.instance_type
  tags = var.tags
  key_name = aws_key_pair.sagar-keypair.key_name
}
[root@minion aws_instance_ssh]# terraform init   ^C
[root@minion aws_instance_ssh]# terraform validate   ^C
[root@minion aws_instance_ssh]# terraform plan    ^C
[root@minion aws_instance_ssh]# terraform apply    ^C
[root@minion aws_instance_ssh]# ssh -i /root/.ssh/id_rsa ubuntu@52.66.235.108

For Non Ubuntu Linux Instances --->
[root@minion aws_instance_ssh]# ssh -i /root/.ssh/id_rsa ec2-user@PUBLIC_IP
##########################################

[root@minion ~]# mkdir aws_instance_prov/    ^C
[root@minion ~]# cd aws_instance_prov/
[root@minion aws_instance_prov]# cp -fr ../aws_instance_ssh/*.tf .    ^C
[root@minion aws_instance_prov]# cat main.tf
resource "aws_key_pair" "sagar-keypair" {
  key_name   = "sagar-keypair"
  public_key = file("/root/.ssh/id_rsa.pub")
}

resource "aws_instance" "web" {
  ami           = var.ami
  instance_type = var.instance_type
  tags = var.tags
  key_name = aws_key_pair.sagar-keypair.key_name

  provisioner "local-exec" {
    command = "echo ${self.private_ip} > /tmp/file.txt"
  }
}
[root@minion aws_instance_prov]# terraform init   ^C
[root@minion aws_instance_prov]# terraform plan    ^C
[root@minion aws_instance_prov]# terraform apply   ^C
[root@minion aws_instance_prov]# ls -ltr /tmp/file.txt
-rw-r--r--. 1 root root 13 Apr  4 12:20 /tmp/file.txt
[root@minion aws_instance_prov]# cat /tmp/file.txt
172.31.0.194
[root@minion aws_instance_prov]#


###########################################

[root@minion aws_instance_prov]# cat samplefile
Hello, This is sample file
[root@minion aws_instance_prov]# cat main.tf
resource "aws_key_pair" "sagar-keypair" {
  key_name   = "sagar-keypair"
  public_key = file("/root/.ssh/id_rsa.pub")
}

resource "aws_instance" "web" {
  ami           = var.ami
  instance_type = var.instance_type
  tags = var.tags
  key_name = aws_key_pair.sagar-keypair.key_name

  provisioner "local-exec" {
    command = "echo ${self.private_ip} > /tmp/file.txt"
  }

  provisioner "file" {
    source = "samplefile"
    destination = "/tmp/samplefile"
    connection {
      type = "ssh"
      user = "ubuntu"
      private_key = file("/root/.ssh/id_rsa")
      host = self.public_ip
    }
  }
}
[root@minion aws_instance_prov]# terraform apply       ^C
[root@minion aws_instance_prov]# ssh -i /root/.ssh/id_rsa ubuntu@15.206.195.42
Welcome to Ubuntu 20.04.6 LTS (GNU/Linux 5.15.0-1031-aws x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

 System information disabled due to load higher than 1.0


Expanded Security Maintenance for Applications is enabled.

10 updates can be applied immediately.
7 of these updates are standard security updates.
To see these additional updates run: apt list --upgradable

Currently attempting to automatically attach this machine to Ubuntu Pro servicesNew release '22.04.2 LTS' available.
Run 'do-release-upgrade' to upgrade to it.


Last login: Tue Apr  4 07:14:37 2023 from 223.178.209.151
To run a command as administrator (user "root"), use "sudo <command>".
See "man sudo_root" for details.

ubuntu@ip-172-31-12-238:~$ cat /tmp/samplefile
Hello, This is sample file
ubuntu@ip-172-31-12-238:~$

#############################################


[root@minion aws_instance_prov]# cat test.sh
#!/bin/sh

echo "Hello, Welcome to Terraform World"
sleep 10
echo "Going to Sleep..."
sleep 20
echo "Time to Wake up"
sleep 10
echo "Good Morning"
exit
[root@minion aws_instance_prov]# cat main.tf
resource "aws_key_pair" "sagar-keypair" {
  key_name   = "sagar-keypair"
  public_key = file("/root/.ssh/id_rsa.pub")
}

resource "aws_instance" "web" {
  ami           = var.ami
  instance_type = var.instance_type
  tags = var.tags
  key_name = aws_key_pair.sagar-keypair.key_name

  provisioner "local-exec" {
    command = "echo ${self.private_ip} > /tmp/file.txt"
  }

  provisioner "file" {
    source = "test.sh"
    destination = "/tmp/test.sh"
    connection {
      type = "ssh"
      user = "ubuntu"
      private_key = file("/root/.ssh/id_rsa")
      host = self.public_ip
    }
  }

  provisioner "remote-exec" {
    inline = [
      "chmod    x /tmp/test.sh",  #use chmod   plus then x /tmp/test.sh
      "/tmp/test.sh",
    ]
    connection {
      type = "ssh"
      user = "ubuntu"
      private_key = file("~/.ssh/id_rsa")
      host = self.public_ip
    }
  }

}
[root@minion aws_instance_prov]# terraform apply  ^C

###############################################

provider.tf ====>


terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "4.61.0"
    }
  }
}

provider "aws" {
  region     = var.region
  access_key = var.access_key
  secret_key = var.secret_key
}

##############################################


[root@minion aws_instance_count]# cat main.tf
resource "aws_instance" "web" {
  count 	= 3
  ami           = var.ami
  instance_type = var.instance_type
  tags = { Name = "${var.tags.Name}-${count.index}" }
}
[root@minion aws_instance_count]# cat output.tf
output "PublicIP" {
  value = aws_instance.web[*].public_ip
}
[root@minion aws_instance_count]# terraform init   ^C
[root@minion aws_instance_count]# terraform plan    ^C
[root@minion aws_instance_count]#
[root@minion aws_instance_count]# terraform apply    ^C


#############################################

[root@minion ~]# mkdir aws_instance_foreach/   ^C
[root@minion ~]# cd aws_instance_foreach/
[root@minion aws_instance_foreach]# cat main.tf
resource "aws_instance" "web" {
  for_each      = toset(["micro", "nano"])
  ami           = var.ami
  instance_type = "t2.${each.key}"
  tags = { Name = "${var.tags.Name}-${each.key}" }
}
[root@minion aws_instance_foreach]# cat output.tf
output "PublicIP" {
  value = "${aws_instance.web["micro"].public_ip} AND ${aws_instance.web["nano"].public_ip}"
}
[root@minion aws_instance_foreach]# terraform init   ^C
[root@minion aws_instance_foreach]# terraform plan    ^C
[root@minion aws_instance_foreach]# terraform apply    ^C


############################################


[root@minion aws_instance_ifelse]# cat variable.tf | tail -4

variable "cr" {
  default =  true
}
[root@minion aws_instance_ifelse]# cat output.tf
output "PublicIP" {
  value = aws_instance.web[*].public_ip
}
[root@minion aws_instance_ifelse]# cat main.tf
resource "aws_instance" "web" {
  count = "${ var.cr == true ? 1 : 0 }"
  ami           = var.ami
  instance_type = var.instance_type
  tags = var.tags
}


#############################################


[root@minion aws_instance_vars]# cat provider.tf
terraform {
  backend "local" {
    path = "/etc/terraform.tfstate"
  }

  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "4.61.0"
    }
  }
}

provider "aws" {
  region     = var.region
  access_key = var.access_key
  secret_key = var.secret_key
}
[root@minion aws_instance_vars]# cat main.tf
resource "aws_instance" "web" {
  ami           = var.ami
  instance_type = "t2.nano"
  tags = var.tags
}
[root@minion aws_instance_vars]#


##############################################









cd ..
